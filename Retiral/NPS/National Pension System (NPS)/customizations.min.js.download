!function(i){var a=2;function r(e,o,r,n){var t="unknown";null!==r&&""===(t=r.name)&&(t="unknown");r=moment(new Date);r.locale("de");r="["+r.format("DD.MM.YY HH:mm:ss.SSS")+"]";i.console&&(1===e&&a<=1?console.debug(r+" DEBUG ["+o+"] ["+t+"]\n"+n):2===e&&a<=2?console.info(r+" INFO  ["+o+"] ["+t+"]\n"+n):3===e&&a<=3?console.warn(r+" WARN  ["+o+"] ["+t+"]\n"+n):4===e&&a<=4&&console.error(r+" ERROR ["+o+"] ["+t+"]\n"+n))}Cookies("LOGLEVEL")&&(a=Cookies("LOGLEVEL")),debug=function(e,o){r(1,e,arguments.callee.caller,o)},info=function(e,o){r(2,e,arguments.callee.caller,o)},warn=function(e,o){r(3,e,arguments.callee.caller,o)},error=function(e,o){r(4,e,arguments.callee.caller,o)},i.debug=debug,i.info=info,i.warn=warn,i.error=error}(window),function(e,n){e.showBEOExpertLabel=function(e,o){var r={de:"BEO Experte",en:"BEO Expert"},e=e in r?e:"en",e=n("<a />").attr({href:"/profiles/html/profileView.do?userid="+o+"&section=beoInformation"}).html(r[e]);n(".beoExpertLabel").html(e).show()}}(window,jQuery),function(r){var e,o,n="contactInformation",t=300;function i(){debug("startTimerToOpenDialog"),o=setTimeout(u,500)}function a(){debug("startTimerToCloseDialog"),clearTimeout(o)}function d(){debug("startTimerToCloseDialog"),e=setTimeout(s,t)}function c(){debug("cancelTimerToKeepDialogOpen"),clearTimeout(e)}function s(){debug("closeOrgUnitDialog"),r(".dialog-orgUnitSearch").dialog("close")}function u(){r(".dialog-orgUnitSearch").dialog({position:{my:"left top",at:"left top+20",of:"#orgUnitSearch"},draggable:!1,height:130,width:350,open:function(e,o){r(".dialog-orgUnitSearch a").blur(),r(".dialog-orgUnitSearch").parent().one("mouseenter",function(){c(),debug(n,"Mouse ENTERED the #dialog-orgUnitSearch"),r(".dialog-orgUnitSearch").parent().on("mouseleave",function(){debug(n,"Mouse LEFT the #dialog-orgUnitSearch"),d()})})}})}r(".lotusProfiles, .myProfile").on("mouseenter","#orgUnitSearch",function(){try{(r(".dialog-orgUnitSearch").dialog("isOpen")?c:i)()}catch(e){i()}}),r(".lotusProfiles, .myProfile").on("mouseleave","#orgUnitSearch",function(){try{(r(".dialog-orgUnitSearch").dialog("isOpen")?d:a)()}catch(e){a()}})}((window,jQuery)),function(e,o){o(document).ready(function(){document.body.style.display="",o("#reversoHeaderBtn").hasClass("lotusBannerBtn")&&o("#reversoHeaderBtn").removeClass("lotusBannerBtn"),o("#urlShortner").attr({href:"http://bos.ch/?url="+e.location.href}),e.location.origin||(e.location.origin=e.location.protocol+"//"+e.location.hostname+(e.location.port?":"+e.location.port:"")),o("#mobileLinkGenerator").attr({href:e.location.origin+"/public/mobilelink/index.html?url="+encodeURIComponent(e.location.href)})})}(window,jQuery),function(r,n){var t,e,o,i,a,d,c,s,u,l,m,p,g,f,v,h,C="com.bosch.connect.developmentbar";debug(C,"onLoad is called"),h={devConsoleUrlParameter:"dev=true",devConsoleCookieName:"developerConsole",devConsoleMenuCookieName:"devConsoleActiveMenu",defaultStartUpModule:"switchServerModule"},t=r.location.href,d=function(){var e,o={q:{cookieDomain:"//rb-connect-q.bosch.com",url:"rb-connect-q.bosch.com",server:["fe0vm04538","si0vm04924"]},pGretel:{cookieDomain:"//connect.bosch.com",url:"connect.bosch.com",server:["fe0vm04539","fe0vm04540","si0vm04917","si0vm04918"]},pHaensel:{cookieDomain:"//rb-connect-next.bosch.com",url:"rb-connect-next.bosch.com",server:["fe0vm916","si0vm1133"]}};for(e in o)if(o.hasOwnProperty(e)&&(debug(C,o[e].url),0<=t.indexOf(o[e].url)))return o[e];return!1},e=function(){f(),v.devbar.slideDown(800),Cookies(h.devConsoleCookieName)||Cookies(h.devConsoleCookieName,"true",{expires:7,path:"/"}),m(),a()},o=function(){debug(C,"closeDevConsole and remove cookie"),v.devbar.slideUp(),u(!0)},u=function(e){e&&Cookies.remove(h.devConsoleCookieName,{path:"/"}),Cookies.remove(h.devConsoleCookieName+"Left",{path:"/"}),Cookies.remove(h.devConsoleCookieName+"Top",{path:"/"}),Cookies.remove(h.devConsoleCookieName+"Width",{path:"/"}),Cookies.remove(h.devConsoleCookieName+"Height",{path:"/"})},l=function(e){var o=n(".icon-popup.resize");debug(C,"resize and drag devConsole"),debug(C,e),v.devbar.hasClass("ui-draggable")?(o.removeClass("active"),g()):(v.devbar.addClass("ui-draggable"),o.addClass("active"),v.devbar.draggable({stop:function(e,o){v.devbar.css("opacity","1"),debug(C,"dragging stopped."),u(),Cookies(h.devConsoleCookieName+"Left",v.devbar.position().left,{path:"/"}),Cookies(h.devConsoleCookieName+"Top",v.devbar.position().top,{path:"/"})},drag:function(e,o){v.devbar.css("opacity","0.5")}}).resizable({stop:function(e,o){Cookies(h.devConsoleCookieName+"Width",v.devbar.width(),{path:"/"}),Cookies(h.devConsoleCookieName+"Height",v.devbar.height(),{path:"/"})},minHeight:165,minWidth:700,maxHeight:322,maxWidth:r.screen.width}))},f=function(){var e,o,r={top:h.devConsoleCookieName+"Top",left:h.devConsoleCookieName+"Left",height:h.devConsoleCookieName+"Height",width:h.devConsoleCookieName+"Width"};for(e in debug(C,"Re-align DevConsole position.."),r)r.hasOwnProperty(e)&&Cookies(r[e])&&(debug(C,Cookies(r[e])),v.devbar.css(e,Cookies(r[e])+"px"),o=!0);o&&l()},g=function(){u(),v.devbar.removeClass("ui-draggable").removeAttr("style").resizable("destroy").draggable("destroy").css("display","block").css("overflow","hidden")},a=function(){var e,o="BCTARGETNODE";debug(C,"setActiveServer()"),debug(C,o),Cookies(o)&&(e=Cookies(o),setTimeout(function(){n("#switchServer li a."+e).addClass("active")},0),debug(C,"name: #switchServer li a."+e))},p=function(e){var o;e?(Cookies(h.devConsoleMenuCookieName,e),o=e,debug(C,"name: "+e)):(o=Cookies(h.devConsoleMenuCookieName)?Cookies(h.devConsoleMenuCookieName):h.defaultStartUpModule,debug(C,o)),n(".devConsoleModule a").removeClass("active"),n(".devConsoleMenu a").removeClass("active"),n(".devConsoleModule."+o).addClass("active"),n(".devConsoleMenu ."+o).addClass("active")},m=function(){var e,o=d();if(debug(C,"hasServerInfo()"),o)for(e in n("#switchServer ul li").remove(),o.server){var r=o.server[e];n("#switchServer ul").append('<li><a class="switchServer '+r+'" title="'+r+'">'+o.server[e]+" [Node "+ ++e+"]</li>")}},i=function(e){var o=d().cookieDomain;debug(C,e),debug(C,o),Cookies("BCTARGETNODE",e,{expires:1,path:"/"}),c()},s=function(){n("#devbar .close").on("click",function(){o()}),n("#switchServer .switchServer").on("click",function(e){i(e.target.title)}),n(".devConsoleMenu a").on("click",function(e){p(e.target.title)}),n(".devConsoleMenu").on("dblclick",function(e){debug(C,"resizeAndDrag() start."),l(e.target)}),n(".devbar.resize").on("click",function(e){debug(C,"resizeAndDrag() start."),l(e.target)})},c=function(e){r.location.reload()},initJqueryDomObject=function(){var e={devbar:n("#devbar")};v=e},debug(C,"run init() function"),(0<t.lastIndexOf(h.devConsoleUrlParameter)||Cookies(h.devConsoleCookieName))&&(debug(C,"run showDevConsole()"),initJqueryDomObject(),e(),p(),s())}(window,jQuery),function(t){var i="DisableFollowOption";t(".lotusui").on("click",["#btn_actn__personCardAddAsMyColleagues",".lotusMenuSeparator .email"],function(o){var r=0,n=setInterval(function(){var e;"email"!==t(o.target).attr("class")&&"btn_actn__personCardAddAsMyColleagues"!==t(o.target).attr("id")&&"btn_actn__personCardAddAsMyColleagues"!==o.target.parentNode.id&&"DYKMainInvitePerson"!==t(o.target).attr("dojoattachpoint")||(0!==(e=t("input[name='invitation_follow']:visible")).length?(e.prop("checked",!1),info(i,"Follow option unchecked"),clearInterval(n)):3e3<r?(error(i,"Timeout reached! The Invitation Dialog has not been opened."),clearInterval(n)):r+=100)},100)})}((window,jQuery)),function(o,d){"use strict";var e=o.location.protocol+"//"+o.location.hostname+"/boschconnect/thirdparty/maintenance/options.json",c={isEnabled:!1,notificationId:null,notifierBox:d("#notifierBox"),notifierBoxContent:d("#notifierBox .notifierMessage .content"),show:function(){this.notifierBox.fadeIn(0)},animate:function(){var e=this.notifierBox.innerHeight()+"px";this.notifierBox.fadeIn(0).css({"margin-top":"-"+e}).animate({"margin-top":"0"},1400)},setAnimationCookie:function(){Cookies("bcNotifierInitialAnimation"+this.notificationId,"true",{expires:999,path:"/"})},remindMeLater:function(e){Cookies("bcNotifierHidden"+this.notificationId,"true",{expires:e,path:"/"})},neverRemind:function(){Cookies("bcNotifierHidden"+this.notificationId,"true",{expires:999,path:"/"})},run:function(){this.isEnabled&&(c.show(),Cookies("bcNotifierHidden"+this.notificationId)&&c.notifierBox.hide(0),d(".remindMeLater").on("click",function(){c.notifierBox.hide(),c.remindMeLater(2)}),d(".neverRemind").on("click",function(){c.notifierBox.hide(),c.neverRemind()}))}},s={options:{isEnabled:!1,enableScrollHeightAt:131,scrollElement:d("#notifierBoxSmall"),fadeInTime:100,fadeOutTime:100},run:function(){var e=this;d(o).scroll(function(){d(o).scrollTop()>e.options.enableScrollHeightAt&&c.notifierBox.is(":visible")?Cookies("bcNotifierHidden")||e.options.scrollElement.fadeIn(e.options.fadeInTime):e.options.scrollElement.fadeOut(e.options.fadeOutTime)})}};d.ajax({url:e,cache:!1,dataType:"json"}).done(function(e){var o=d("#notifierBox"),r=d("#notifierBoxIcon"),n=d("#notifierBox .content"),t=d(".leftButton .notifierButton"),i=d(".rightButton .notifierButton"),a=d("#notifierBox .customClose");e.header&&(e=e.header,c.notificationId=e.id,c.isEnabled=!0,"green"===e.color||"red"===e.color||"yellow"===e.color?o.addClass(e.color):o.addClass("red"),e.icon&&r.replaceWith(e.icon),n.html(e.text),"temp_and_perm"===e.userButtons?(t.text("Remind me in 2 days"),i.text("Do not remind me again"),a.hide()):"perm"===e.userButtons?(t.hide(),i.hide()):(t.hide(),i.hide(),a.hide()),c.run(),s.run())}).error(function(){})}(window,jQuery),function(e){var o="RenderBusinessCardHelper";e.callSemanticTagServiceonID=function(e){debug(o,"callSemanticTagServiceonID"),debug(o,"elementId"+e),SemTagSvc.parseDom(null,e)}}(window,jQuery);var communardo=communardo||{config:{sharepoint:{DOCUMENT_HOSTS:[],SEARCH_HOST:"",SEARCH_CONTEXT_PATH:"",INDEX_FIELD_NAME_DOCUMENT_ID:"",INDEX_FIELD_NAME_PATH:""},previewcard:{DOCUMENT_ID_PARAM_NAME:"",REMOVAL_DELAY:1e3,DISABLE_PREVIEW_PARAMETER_WITH_VALUE:"disablePreview=true",CUSTOM_PREVIEW_FILE_EXTENSIONS:["mp4","mp3"],CUSTOM_PREVIEW_FILE_PREVIEW_IMAGE:{mp4:"/_layouts/15/images/videopreview.png",mp3:"/_layouts/15/images/audiopreview.png"}},utils:{LOG_ID_SP:"com.bosch.sharepoint.preview"},translations:{defaultLang:"en"}},translations:{locale:djConfig.locale.split("-")[0],de:{ERROR_MSG_GENERAL:"Es ist ein Fehler aufgetreten. Bitte kontaktieren Sie einen Administrator für weitere Informationen.",ERROR_MSG_FAILED_SEARCH_REQUEST:"Es ist ein Fehler während der Suchanfrage an SharePoint aufgetreten. Bitte kontaktieren Sie einen Administrator für weitere Informationen.",ERROR_MSG_NO_DOCUMENT_FOUND:"Dokument nicht gefunden.",ERROR_MSG_NO_DOCUMENT_PREVIEW:"Keine Vorschau verfügbar."},en:{ERROR_MSG_GENERAL:"An error occured. Please contact an administrator for further assistance.",ERROR_MSG_FAILED_SEARCH_REQUEST:"There was an error when trying to search the file in SharePoint. Please contact an administrator for further assistance.",ERROR_MSG_NO_DOCUMENT_FOUND:"No document could be found.",ERROR_MSG_NO_DOCUMENT_PREVIEW:"There is no document preview available."}},utils:{cdebug:function(e){debug(communardo.config.utils.LOG_ID_SP,e)},cerror:function(e){error(communardo.config.utils.LOG_ID_SP,e)},getText:function(e){var o=communardo.translations[communardo.translations.locale];return o=void 0===(o=void 0===(o=void 0!==o?communardo.translations[communardo.translations.locale][e]:o)?communardo.translations[communardo.config.translations.defaultLang][e]:o)?e:o}},sharepoint:{querySharepointAPI:function(r,n,t,i,a){require(["dojo/request"],function(e){var o="//"+communardo.config.sharepoint.SEARCH_HOST+communardo.config.sharepoint.SEARCH_CONTEXT_PATH;communardo.utils.cdebug("Starting Sharepoint Search request. Target URL: "+(o+=n+t+r)),e.get(o,{headers:{Accept:"application/json;odata=verbose","Content-Type":"application/json;odata=verbose;charset=utf-8"},withCredentials:!0}).then(function(e){var o=communardo.sharepoint.extractSearchResults(JSON.parse(e));communardo.utils.cdebug("Sharepoint Search request successful. Processing Response: "+e),i(o)},function(e){a(e),communardo.utils.cerror("Sharepoint Search request failed. Error: "+e)})})},extractSearchResults:function(e){var o={},r=e.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;return o.resultList=r.map(function(e){return e.Cells.results.reduce(function(e,o){return e[o.Key]=o.Value,e},{})}),o.totalRows=e.d.query.PrimaryQueryResult.RelevantResults.TotalRows,o.totalRowsIncludingDuplicates=e.d.query.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates,communardo.utils.cdebug("Successfully processed Sharepoint Search response. Returning: "+JSON.stringify(o)),o},buildGetParameterString:function(e){e="?querytext=%27"+e+"%27";return e+="&selectproperties='Title%2cServerRedirectedEmbedURL",e+="%2cDocId%2cTitle%2cLastModifiedTime%2cisContainer%2cSecondaryFileExtension%2cDocumentLink%2c",e+=communardo.config.sharepoint.INDEX_FIELD_NAME_DOCUMENT_ID+"'",communardo.utils.cdebug("Successfully build getParameterString for Sharepoint Search request. GetParameter: "+e),e},searchDocumentsByDocumentId:function(e,o,r){communardo.utils.cdebug("Starting Sharepoint Search for document id: "+e),e=communardo.config.sharepoint.INDEX_FIELD_NAME_DOCUMENT_ID+":"+e,e=communardo.sharepoint.buildGetParameterString(e),this.querySharepointAPI(e,"","/_api/search/query",o,r)},searchDocumentsByPath:function(e,o,r){communardo.utils.cdebug("Starting Sharepoint Search for url path: "+e),e=communardo.config.sharepoint.INDEX_FIELD_NAME_PATH+'="'+e+'"',e=communardo.sharepoint.buildGetParameterString(e),this.querySharepointAPI(e,"","/_api/search/query",o,r)}},previewcard:{urltype:{DOCUMENT_ID_URL:0,WOPI_URL:1,PATH_URL:2},timeoutId:-1,mediaControl:{toggleControls:function(e){null===e.attr("controls")&&!0===e.attr("controls")?dojo.removeAttr(e,"controls"):e.attr("controls","true")},playButtonClick:function(){communardo.utils.cdebug("Inital play button has been clicked"),require(["dojo/on"],function(e){var o=dojo.query(".sharepoint-preview-card .media-container-wrapper .media-container-initial-playbutton")[0];dojo.style(o,"display","none");var r=dojo.query(".sharepoint-preview-card .media-container-wrapper .media-container");e(r,"mouseover",function(){communardo.utils.cdebug("Mediaelement has been hovered on"),communardo.previewcard.mediaControl.toggleControls(r)}),e(r,"mouseout",function(){communardo.utils.cdebug("Mediaelement has been hovered out"),communardo.previewcard.mediaControl.toggleControls(r)}),r[0].play()})}},addHoverListener:function(o){communardo.utils.cdebug("Adding hover event listener to Sharepoint PreviewCard."),require(["dojo/on","dojo/domReady!"],function(e){e(o,"mouseover",function(){communardo.previewcard.clearDestroyTimeout(),dojo.addClass(this,"hovered")}),e(o,"mouseleave",function(e){var o;null!==e.toElement&&(o=this,dojo.removeClass(o,"hovered"),communardo.previewcard.timeoutId=setTimeout(function(){communardo.previewcard.removePreviewCard(!1),communardo.previewcard.clearActiveLinks(o),communardo.previewcard.timeoutId=-1},communardo.config.previewcard.REMOVAL_DELAY))})})},clearDestroyTimeout:function(){-1<communardo.previewcard.timeoutId&&(communardo.utils.cdebug("Clearing timeout for removing the Sharepoint PreviewCard."),clearTimeout(communardo.previewcard.timeoutId),communardo.previewcard.timeoutId=-1)},clearActiveLinks:function(){for(var e=0;e<communardo.config.sharepoint.DOCUMENT_HOSTS.length;e++)dojo.query("a[href*="+communardo.config.sharepoint.DOCUMENT_HOSTS[e]+"].active").forEach(function(e){dojo.hasClass(this,"hovered")||(communardo.utils.cdebug("Clearing active flag on URL element: "+this.toString()),dojo.removeClass(e,"active"))})},getDocumentId:function(e){return communardo.utils.cdebug("Extracting document id from PreviewCard: "+e.toString()),dojo.attr(e,"data-documentId")},removePreviewCard:function(e){var o;0<dojo.query(".sharepoint-preview-card").length&&(o=dojo.query(".sharepoint-preview-card")[0],communardo.utils.cdebug("Removing Sharepoing PreviewCard: "+o.toString()),e?dojo.destroy(o):(e=communardo.config.previewcard.DOCUMENT_ID_PARAM_NAME,e+="=",e+=communardo.previewcard.getDocumentId(o),e=0<dojo.query("a[href*='"+e+"'].hovered").length,dojo.hasClass(o,"hovered")||e||(dojo.destroy(o),communardo.previewcard.clearActiveLinks())))},addPreviewCardDocument:function(e,o){var r;return communardo.utils.cdebug("Adding Document Preview to Sharepoint PreviewCard for document: "+JSON.stringify(e)),(r=dojo.create("iframe")).src=e.ServerRedirectedEmbedURL,dojo.addClass(r,"document-preview"),dojo.place(communardo.previewcard.buildFilenameHeading(e),o),dojo.place(r,o),o},addPreviewCardMediaFile:function(e,o){var r,n,t,i,a;return communardo.utils.cdebug("Adding Media Preview to Sharepoint PreviewCard for document: "+JSON.stringify(e)),a=dojo.create("div"),dojo.addClass(a,"media-container-wrapper"),i=dojo.create("video"),dojo.addClass(i,"media-container"),void 0!==communardo.config.previewcard.CUSTOM_PREVIEW_FILE_PREVIEW_IMAGE[e.SecondaryFileExtension]&&(i.poster="//"+communardo.config.sharepoint.SEARCH_HOST+communardo.config.previewcard.CUSTOM_PREVIEW_FILE_PREVIEW_IMAGE[e.SecondaryFileExtension]),i.width="400",i.height="230",(r=dojo.create("source")).src=e.DocumentLink,(t=dojo.create("a")).title="Play",dojo.place(dojo.create("span"),t),n=dojo.create("div"),dojo.addClass(n,"media-container-initial-playbutton"),dojo.place(t,n),require(["dojo/on"],function(e){e(n,"click",communardo.previewcard.mediaControl.playButtonClick)}),dojo.place(communardo.previewcard.buildFilenameHeading(e),o),dojo.place(r,i),dojo.place(i,a),dojo.place(n,a),dojo.place(a,o),o},addPreviewCardErrorMessage:function(e,o){var r=dojo.create("div");return communardo.utils.cdebug("Adding the following error message to the Sharepoint PreviewCard: "+e),r.innerHTML=e,dojo.addClass(r,"error-message"),dojo.place(r,o),o},buildPreviewCardContainer:function(e){var o,r=dojo.create("span");return dojo.addClass(r,"close-previewcard-button"),require(["dojo/on"],function(e){e(r,"click",communardo.previewcard.closeButtonHandler)}),o=dojo.create("div"),dojo.addClass(o,"sharepoint-preview-card"),dojo.addClass(o,"active"),dojo.attr(o,"data-documentId",e),dojo.place(r,o),communardo.utils.cdebug("Build PreviewCard container with the document id: "+e),o},buildFilenameHeading:function(e){var o=dojo.create("h2");return o.innerHTML=e.Title+"."+e.SecondaryFileExtension,dojo.addClass(o,"filename"),o},closeButtonHandler:function(){communardo.previewcard.removePreviewCard(!0),communardo.previewcard.clearActiveLinks(),communardo.previewcard.clearDestroyTimeout()},setPreviewCardPosition:function(e,o){var r=e.getBoundingClientRect(),n=o.getBoundingClientRect(),t=r.left;return r.left+n.width>window.innerWidth&&(t=window.innerWidth-n.width-40)<0&&(t=0),dojo.style(o,"left",t+"px"),e=r.bottom+window.pageYOffset,t=o.getBoundingClientRect().height,r.bottom+n.height>window.innerHeight&&0<r.top+window.pageYOffset-t&&r.top>window.innerHeight/2&&(e=r.top-t+window.pageYOffset),dojo.style(o,"top",e+"px"),o},getTargetNodes:function(){var e,o,r;if(0<communardo.config.sharepoint.DOCUMENT_HOSTS.length)for(o=0;o<communardo.config.sharepoint.DOCUMENT_HOSTS.length&&(r="a[href*='"+communardo.config.sharepoint.DOCUMENT_HOSTS[o]+"'].hovered.si-link",!(0<(e=dojo.query(r)).length));o++);return communardo.utils.cdebug("Looking for the currently active url node. Found: "+e),e},extractDocumentId:function(e){var o=new RegExp("[?&]"+communardo.config.previewcard.DOCUMENT_ID_PARAM_NAME+"=([A-z0-9-]+)","i"),r="",o=e.match(o);return null!==o&&2===o.length&&(r+=o[1]),communardo.utils.cdebug("Tried to extract the document id "+r+" from the following url: "+e),r},renderPreviewCard:function(e){var o,r=communardo.previewcard.getTargetNodes();communardo.utils.cdebug("Trying to render the following Sharepoint PreviewCard container: "+e.toString()),0<r.length&&(communardo.previewcard.removePreviewCard(!0),communardo.previewcard.clearActiveLinks(),communardo.previewcard.clearDestroyTimeout(),dojo.forEach(r,function(e){dojo.hasClass(e,"hovered")&&(o=e)}),void 0!==o&&(dojo.place(e,dojo.query("body")[0]),e=communardo.previewcard.setPreviewCardPosition(o,e),dojo.addClass(o,"active"),communardo.previewcard.addHoverListener(e)))},renderErrorCard:function(e){var o=communardo.previewcard.buildPreviewCardContainer(),o=communardo.previewcard.addPreviewCardErrorMessage(e,o);communardo.utils.cdebug("Trying to render the following ErrorCard: "+o.toString()),communardo.previewcard.renderPreviewCard(o)},failedSearchResponseHandler:function(e){var o="Request to sharepoint URL "+communardo.config.sharepoint.SEARCH_HOST+" failed. Further Parameters: ";communardo.utils.cerror(o),communardo.utils.cerror(e),communardo.previewcard.renderErrorCard(communardo.utils.getText("ERROR_MSG_FAILED_SEARCH_REQUEST"))},isValidSearchResult:function(e){var o=!0;return o=("true"===e.isContainer||null===e.ServerRedirectedEmbedURL)&&-1===communardo.config.previewcard.CUSTOM_PREVIEW_FILE_EXTENSIONS.indexOf(e.SecondaryFileExtension)?!1:o},successfulSearchResponseHandler:function(e){var o;0<e.resultList.length?(o=e.resultList[0],communardo.previewcard.isValidSearchResult(o)?(communardo.utils.cdebug("Document found. Starting rendering procedure of the PreviewCard: "+JSON.stringify(o)),e=o[communardo.config.sharepoint.INDEX_FIELD_NAME_DOCUMENT_ID],e=communardo.previewcard.buildPreviewCardContainer(e),e=-1===communardo.config.previewcard.CUSTOM_PREVIEW_FILE_EXTENSIONS.indexOf(o.SecondaryFileExtension)?communardo.previewcard.addPreviewCardDocument(o,e):communardo.previewcard.addPreviewCardMediaFile(o,e),communardo.previewcard.renderPreviewCard(e)):communardo.utils.cdebug(communardo.utils.getText("ERROR_MSG_NO_DOCUMENT_PREVIEW"))):(communardo.utils.cdebug("No Document found. Rendering error message for user."),communardo.previewcard.renderErrorCard(communardo.utils.getText("ERROR_MSG_NO_DOCUMENT_FOUND")))},handleDocumentIdUrl:function(e){communardo.sharepoint.searchDocumentsByDocumentId(communardo.previewcard.extractDocumentId(e),communardo.previewcard.successfulSearchResponseHandler,communardo.previewcard.failedSearchResponseHandler)},removeParameterFromUrl:function(e){var o=e;return-1<e.indexOf("?")&&(o=e.substr(0,e.indexOf("?"))),communardo.utils.cdebug("Removed get parameters from url: "+e),communardo.utils.cdebug("Cleaned URL: "+o),o},handleWopiUrl:function(e){var o=new RegExp("[&?]sourcedoc=([^&]+)","i"),e=e.match(o);null!==e&&2===e.length&&(o=e[1],o=decodeURI(o),e="https://",e+=communardo.config.sharepoint.SEARCH_HOST,e+=communardo.config.sharepoint.SEARCH_CONTEXT_PATH,communardo.previewcard.handlePathUrl(e+=o))},handlePathUrl:function(e){e=communardo.previewcard.removeParameterFromUrl(e);communardo.sharepoint.searchDocumentsByPath(e,communardo.previewcard.successfulSearchResponseHandler,communardo.previewcard.failedSearchResponseHandler)},analyzeUrl:function(e){return""!==communardo.previewcard.extractDocumentId(e)?communardo.previewcard.urltype.DOCUMENT_ID_URL:-1<e.indexOf("/WopiFrame.aspx?")?communardo.previewcard.urltype.WOPI_URL:communardo.previewcard.urltype.PATH_URL},mouseoverHandler:function(e){var o;if(!dojo.hasClass(e,"hovered")&&(communardo.utils.cdebug("Mouseover event triggered on element: "+e.toString()),dojo.addClass(e,"hovered"),dojo.addClass(e,"si-link"),communardo.previewcard.clearDestroyTimeout(),!dojo.hasClass(e,"active")))switch(o=e.href,communardo.previewcard.analyzeUrl(o)){case communardo.previewcard.urltype.DOCUMENT_ID_URL:communardo.utils.cdebug("Detected a Document ID inside of the URL."),communardo.previewcard.handleDocumentIdUrl(o);break;case communardo.previewcard.urltype.WOPI_URL:communardo.utils.cdebug("Detected a Wopi Url."),communardo.previewcard.handleWopiUrl(o);break;case communardo.previewcard.urltype.PATH_URL:communardo.utils.cdebug("Detected a Path URL."),communardo.previewcard.handlePathUrl(o)}},mouseoutHandler:function(e){var o=e;communardo.utils.cdebug("Mouseout event triggered on element: "+e.toString()),dojo.removeClass(o,"hovered"),communardo.previewcard.clearDestroyTimeout(),communardo.previewcard.timeoutId=setTimeout(function(){var e;dojo.hasClass(o,"hovered")||(0<(e=dojo.query(".sharepoint-preview-card")).length&&!dojo.hasClass(e[0],"hovered")?(communardo.previewcard.removePreviewCard(!1),dojo.removeClass(o,"active"),communardo.previewcard.timeoutId=-1):dojo.removeClass(o,"active"))},communardo.config.previewcard.REMOVAL_DELAY)},addUrlEventListener:function(o){communardo.utils.cdebug("Adding URL event listener for host: "+o),require(["dojo/on"],function(e){e(document,"a[href*="+o+"]:mouseover",function(){-1===this.href.indexOf(communardo.config.previewcard.DISABLE_PREVIEW_PARAMETER_WITH_VALUE)&&communardo.previewcard.mouseoverHandler(this)}),e(document,"a[href*="+o+"]:mouseout",function(){-1===this.href.indexOf(communardo.config.previewcard.DISABLE_PREVIEW_PARAMETER_WITH_VALUE)&&communardo.previewcard.mouseoutHandler(this)})})},init:function(){var e,o;communardo.utils.cdebug("Initializing Sharepoing Integration PreviewCard"),o={attributes:!0},null!==(e=document.querySelector("#tabNavBar"))&&new MutationObserver(function(){var e,o=dojo.query(".sharepoint-preview-card");0<o.length&&(e=dojo.style(o[0],"top"),0<dojo.query(".tabNavFixed").length&&0<o.length?dojo.style(o[0],"top",e-140+"px"):dojo.style(o[0],"top",e+140+"px"))}).observe(e,o),require(["dojo/domReady!"],function(){dojo.forEach(communardo.config.sharepoint.DOCUMENT_HOSTS,function(e){communardo.previewcard.addUrlEventListener(e)})})}}};communardo.config.sharepoint.DOCUMENT_HOSTS=["sites.inside-share.bosch.com","inside-share-hosted-apps.bosch.com","sites.share.bosch.com"],communardo.config.sharepoint.SEARCH_HOST="content.inside-share.bosch.com",communardo.config.sharepoint.SEARCH_CONTEXT_PATH="",communardo.config.sharepoint.INDEX_FIELD_NAME_DOCUMENT_ID="BoschDMSShortid",communardo.config.sharepoint.INDEX_FIELD_NAME_PATH="Path",communardo.config.previewcard.DOCUMENT_ID_PARAM_NAME="documentID",communardo.config.previewcard.REMOVAL_DELAY=2e3,communardo.previewcard.init(),function(e,o){e.supportInfoUtils={};function r(e){o(e?".supportInfoCopiedOk":".supportInfoCopiedNok").show(),setTimeout(function(){o(".supportInfoCopiedOk").hide()},2e3)}supportInfoUtils.copySupportInfo=function(){debug("com.bosch.connect.supportInfoUtils","copySupportInfo >>>>>>");var e=document.getElementById("supportInfoTextArea");document.getElementById("supportInfoCopyAnswer"),document.getElementById("supportInfoCopyBlock"),e.select();try{var o=document.execCommand("copy");o&&r(o)}catch(e){r(!1)}}}(window,jQuery),function(t){var i,a=Cookies("BCTARGETNODE"),d=Cookies("BCSESSIONID");!function(){debug("com.bosch.connect.supportInfoUtils","setSupportInfo >>>>>>");var e,o,r,n="Bosch Connect Support information\n",r=(o=navigator.userAgent,r=o.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[],/trident/i.test(r[1])?{name:"IE ",version:(e=/\brv[ :]+(\d+)/g.exec(o)||[])[1]||""}:"Chrome"===r[1]&&null!=(e=o.match(/\bOPR\/(\d+)/))?{name:"Opera",version:e[1]}:(r=r[2]?[r[1],r[2]]:[navigator.appName,navigator.appVersion,"-?"],null!=(e=o.match(/version\/(\d+)/i))&&r.splice(1,1,e[1]),{name:r[0],version:r[1]}));n+="Browser: "+r.name+" "+r.version+"\n",n+="Node:",n+=a?" "+a:" error no target server defined",n+="\n",void 0!==d&&(i=d.split(":")[0],n+="Session ID:",n+=(i=String(i).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;"))?" "+i:" error no session id"),n+="\n",n+="Version: 21.10-4-2021-11-02_05-04-53",t("#supportInfoTextArea").val(n)}()}((window,jQuery)),function(a,d){a.switchHomepageUtils={};var c="orientme",s="orientme-ob",u="homepage",l="com.bosch.connect.switchHomepage";function n(e,o){debug(l,"updateSelectedHomepage >>>>>>"),debug(l,"userid="+e+" | currentSelectedHomepage="+o);var r,n=new Date((new Date).toUTCString()).getTime(),t="/";if(o==c||o==s)r=u,i=!0,t="/homepage",Cookies.remove("ORIENTME");else{if(o!=u)return void error(l,"Something went wrong. Invalid value for currentSelectedHomepage="+o);r=c,i=!1,t="/social",Cookies.set("ORIENTME","true",{expires:365,path:"/"})}var i='{"selectedHomepage" : "'+r+'", "timestamp" : '+n+', "switchBack": '+i+"}";debug(l,"putData="+i),d.ajax({url:"/profiles/atom/profileExtension.do?extensionId=selectedHomepage&userid="+e,type:"PUT",xhrFields:{withCredentials:!0},data:i}).done(function(e,o){return debug(l,"response="+e+" | status="+o),a.location=t,!0}).fail(function(e,o,r){return debug(l,"xhr="+e+" | response="+o+" | status="+r),debug(l,"failed to store the extension attribute selectedHomepage"),!1})}function r(e){debug(l,"setSwitchLabelText >>>>>>"),debug(l,"selectedHomepage="+e);var o=widgetUtils.getUserLanguage();debug(l,"userLanguage="+o);var r="Try out new home page",n="Go back to old home page";0<=["de","de-de","de-at","de-li","de-lu","de-ch"].indexOf(o)?(r="Neue Homepage ausprobieren",n="Zurück zur alten Homepage"):0<=["fr"].indexOf(o)&&(r="Essayezla nouvelle page d'accueil",n="Retour à l'ancienne page d'accueil");var t=r,t=e==c||e==s?n:r;debug(l,"label="+t);var i=0,a=setInterval(function(){d("#switchHomepage").text()?(debug(l,"switchHomepage element found. Setting label"),d("#switchHomepage").text(t),clearInterval(a)):1e3<i?(error(l,"Timeout reached! The switchHomepage element could not be found"),clearInterval(a)):i+=10},10)}switchHomepageUtils.switchHomepage=function(r){debug(l,"switchHomepage >>>>>>"),debug(l,"userid="+r),d.ajax({url:"/profiles/atom/profileExtension.do?extensionId=selectedHomepage&userid="+r,type:"GET",xhrFields:{withCredentials:!0}}).done(function(e,o){return debug(l,"response="+e+" | status="+o),e?(e=JSON.parse(e).selectedHomepage,debug(l,"currentSelectedHomepage="+e),n(r,e)):(debug(l,"Extension attribute does not yet exist."),n(r,u)),!0}).fail(function(e,o,r){return debug(l,"xhr="+e+" | response="+o+" | status="+r),debug(l,"failed to read the extension attribute selectedHomepage. Eventually it does not yet exist"),!1})},switchHomepageUtils.getHomeUrl=function(e){debug(l,"getHomeUrl >>>>>>"),debug(l,"userid="+e);var n="/homepage";try{d.ajax({url:"/profiles/atom/profileExtension.do?extensionId=selectedHomepage&userid="+e,type:"GET",xhrFields:{withCredentials:!0}}).done(function(e,o){debug(l,"response="+JSON.stringify(e)+" | status="+o),e?(e=JSON.parse(e).selectedHomepage,debug(l,"selectedHomepage="+e),e==c||e==s?n="/social":e==u&&(n="/homepage")):debug(l,"Extension attribute selectedHomepage is not yet set. Using /homepage"),debug(l,"redirectUrl="+n),a.location=n}).fail(function(e,o,r){debug(l,"xhr="+e+" | response="+o+" | status="+r),debug(l,"failed to read the extension attribute selectedHomepage. Eventually it does not yet exist"),a.location=n})}catch(e){error(l,"Something went wrong. Error message: "+e+". Use /homepage"),a.location=n}},switchHomepageUtils.setSwitchLabel=function(e){debug(l,"setSwitchLabel >>>>>>"),debug(l,"userid="+e),dojo.cookie("ORIENTME")?r(c):d.ajax({url:"/profiles/atom/profileExtension.do?extensionId=selectedHomepage&userid="+e,type:"GET",xhrFields:{withCredentials:!0}}).done(function(e,o){debug(l,"response="+JSON.stringify(e)+" | status="+o),e?r(JSON.parse(e).selectedHomepage):(debug(l,"Extension attribute selectedHomepage is not yet set. Using homepage as default"),r(u))}).fail(function(e,o,r){debug(l,"xhr="+e+" | response="+o+" | status="+r),debug(l,"failed to read the extension attribute selectedHomepage. Eventually it does not yet exist")})}}(window,jQuery),function(e,t){var i=!1,a=document.cookie.split(";"),d="//"+location.host,c="Terms and Conditions",s={tc:{acceptTc:function(){s.tc.closeWindow();var r=location.protocol+"//"+location.host,n=new Date((new Date).toUTCString()).getTime();t.xhrGet({url:r+"/connections/opensocial/basic/rest/people/@me/",handleAs:"json",load:function(e,o){e.entry.emails[0].value;e=s.tc.getUserId(e.entry.id);t.xhrPut({url:r+"/profiles/atom/profileExtension.do?extensionId=privacyAndGuidelines&userid="+e,putData:n.toString(),handleAs:"text",load:function(e,o){},error:function(e,o){debug(c,"failed to store the extension type privacyAndGuidelines")}})},error:function(e,o){debug(c,"Could not read profile!")}})},showAlertDialog:function(){t.require("dijit.Dialog"),new dijit.Dialog({id:"boschdisclaimer",duration:1},"boschdisclaimer_div").show()},escape:function(){s.tc.closeWindow(),e.location="https://inside.bosch.com/irj/portal"},toggleNext:function(e){elem=document.getElementById("okbutton"),e.checked?("Microsoft Internet Explorer"===navigator.appName?elem.style.color="black":elem.setAttribute("style","color: black !important"),elem.disabled=!1):("Microsoft Internet Explorer"===navigator.appName?elem.style.color="#676767":elem.setAttribute("style","color: #676767 !important"),elem.disabled=!0)},getUserId:function(e){var o=e.lastIndexOf(":")+1,r=e.length;return e.substring(o,r)},closeWindow:function(){var e;elem=dijit.byId("boschdisclaimer"),void 0!==elem?elem.hide():void 0!==(e=document.getElementById("boschdisclaimer_div"))&&(e.style.visibility="hidden")}}};e.bosch=s,function(){for(var e,o=0;o<a.length;o++){for(var r=a[o];" "===r.charAt(0);)r=r.substring(1);var n=r.substring(0,r.indexOf("="));"confirm_tc"!==n&&"confirm_tc_1.1"!==n&&"bcConfirmTC"!==n||(e=n,document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;",debug(c,"Old cookie found and deleted. cookieName="+n),i=!0,s.tc.acceptTc())}!1===i&&t.xhrGet({url:d+"/connections/opensocial/basic/rest/people/@me/",preventCache:"true",timout:6e5,handleAs:"json",load:function(e,o){e.entry.emails[0].value;e=s.tc.getUserId(e.entry.id);t.xhrGet({url:d+"/profiles/atom/profileExtension.do?extensionId=privacyAndGuidelines&userid="+e,handleAs:"text",load:function(e,o){debug(c,"response to xhrGet for privacyAndGuidelines="+e),""===e&&s.tc.showAlertDialog()},error:function(e,o){s.tc.showAlertDialog(),debug(c,"fetching prof extn failed , showing dialog")}})},error:function(e,o){debug(c,"Could not read profile!")}})}()}(window,dojo);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
